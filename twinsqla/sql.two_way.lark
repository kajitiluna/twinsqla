query_statement: query_expr

query_expr: query_select

// SELECT

query_select: [ with ] select_block [ order ] [ limit ]

with: "WITH"i with_query ( "," with_query )*
with_query: with_query_name "AS"i "(" query_select ")"
with_query_name: NAME

select_block: select
            | "(" query_select ")"
            | query_select union_op query_select

union_op: "UNION"i ( "ALL"i | "DISTINCT"i )
        | "INTERSECT"i "DISTINCT"i
        | "EXCEPT"i "DISTINCT"i

order: "ORDER"i "BY"i order_query ( "," order_query )*
order_query: expression [ "ASC"i | "DESC"i ]

limit: "LIMIT"i INT [ "OFFSET"i INT ]

select: "SELECT"i [ "DISTINCT"i ] ( full_column | select_columns ) [ from ] [ where ] [ group ] [ having ] [ window ]

full_column: "*"

select_columns: select_column ( "," select_column )*

select_column: expression [ [ "AS"i ] alias ]
             | table_full_column

table_full_column: table_name "." "*"


from: "FROM"i query_table ( "," query_table )*

query_table: table ( join_table )*

table: table_name [ [ "AS"i ] alias ]
     | "UNNEST"i "(" array_expression ")" [ [ "AS"i ] alias ]

join_table: join_type table "ON"i bool_expression

join_type: "INNER"i "JOIN"i                  -> inner_join
         | "LEFT"i [ "OUTER"i ] "JOIN"i      -> left_outer_join
         | "RIGHT"i [ "OUTER"i ] "JOIN"i     -> right_outer_join
         | "CROSS"i "JOIN"i                  -> cross_join

array_expression: column_name


where: "WHERE"i bool_expression
group: "GROUP"i "BY"i expression ( "," expression )*
having: "HAVING"i bool_expression
window: "WINDOW"i expression "AS"i expression ( "," expression )*


// expression

expression: sql_expression
          | bool_expression
          | numeric_expression

sql_expression: column_term
              | text
              | bind_param
              | twoway_bind_text
              | case_expr
              | case
              | function

column_term: column_name
           | table_name "." column_name

text: /'([^\n']|'{2})*'/
twoway_bind_text: twoway_bind_param text

case_expr: "CASE"i expression case_when+ [ case_else ] "END"i
case_when: "WHEN"i expression "THEN"i expression
case_else: "ELSE"i expression

case: "CASE"i case_bool+ [ case_else ] "END"i
case_bool: "WHEN"i bool_expression "THEN"i expression

function: function_name "(" [ function_arg ( "," function_arg )* ] ")"
function_arg: ( NAME )* expression ( NAME )*


// bool_expression

bool_expression: ( bool_expression "OR"i )* bool_and_term
bool_and_term: ( bool_and_term "AND"i )* bool_preterm
bool_preterm: [ "NOT"i ] bool_match_term

bool_match_term: bool_term_2way [ bool_matched_op ]
               | bool_term_2way ( equal_op | not_equal_op ) bool_term_2way
               | exists_op
               | sql_expression ( in_op | not_in_op | between | like_op | not_like_op )
               | numeric_expression compare_op numeric_expression

bool_term_2way: bool_term

bool_term: TRUE
         | FALSE
         | NULL
         | bind_param
         | twoway_bind_bool
         | dynamic_if_bool
         | "(" bool_expression ")"
         | sql_expression

twoway_bind_bool: twoway_bind_param ( TRUE | FALSE | NULL )

dynamic_if_bool: dynamic_if bool_expression ( dynamic_elseif DUMMY_OP bool_expression )* [ dynamic_else DUMMY_OP bool_expression ] dynamic_end

?dynamic_if: "/*%if "i python_expression "*/"
?dynamic_elseif: ( "/*%elseif "i | "/*%elif "i ) python_expression "*/"
dynamic_else: "/*%else*/"i
dynamic_end: "/*%end*/"i
DUMMY_OP: "OR"i | "AND"i

bool_matched_op: "IS"i "TRUE"i          -> is_true
               | "IS"i "NOT"i "TRUE"i   -> is_not_true
               | "IS"i "FALSE"i         -> is_false
               | "IS"i "NOT"i "FALSE"i  -> is_not_false
               | "IS"i "NULL"i          -> is_null
               | "IS"i "NOT"i "NULL"i   -> is_not_null

not_in_op: "NOT"i in_op
in_op: "IN"i "(" query_expr ")"
     | "IN"i "(" [ expression ( "," expression )* ] ")"
between: "BETWEET"i sql_expression "AND"i sql_expression
like_op: "LIKE"i sql_expression
not_like_op: "NOT"i "LIKE"i sql_expression

exists_op: "EXISTS"i "(" query_select ")"

compare_op: equal_op
          | not_equal_op
          | "<"          -> less_than_op
          | ">"          -> more_than_op
          | "<="         -> less_equql_than_op
          | ">="         -> more_equql_than_op

equal_op: "="
not_equal_op: "!=" | "<>"


// numeric expression

numeric_expression: ( numeric_expression "|" )* numeric_bit_xor
numeric_bit_xor: ( numeric_bit_xor "^" )* numeric_bit_and
numeric_bit_and: ( numeric_bit_and "&" )* numeric_bit_shift
numeric_bit_shift: ( numeric_bit_shift ( "<<" | ">>" ) )* numeric_term

numeric_term: ( numeric_term ( "+" | "-" ) )* numeric_factor
numeric_factor: ( numeric_factor ( "*" | "/" | "||" ) )* numeric_presymbol
numeric_presymbol: [ "~" ] numeric_symbol

numeric_symbol: SIGNED_NUMBER
              | bind_param
              | twoway_bind_numeric
              | "(" numeric_expression ")"
              | sql_expression

twoway_bind_numeric: twoway_bind_param SIGNED_NUMBER

table_name: NAME
column_name: NAME
function_name: NAME [ "." NAME ]
alias: NAME

bind_param: BIND_PARAM_NAME
BIND_PARAM_NAME: /:[a-zA-Z_]\w*/

twoway_bind_param: "/*" bind_param "*/"
                 | "/*" dynamic_value "*/"

dynamic_value: /[a-zA-Z\(\)\+\-].*/+

NAME: /[a-zA-Z_]\w*/
TRUE: "TRUE"i
FALSE: "FALSE"i
NULL: "NULL"i

SQL_MULTILINE_COMMENT: "/**" /.*?/s "*/"

%import .python_grammer.expression -> python_expression

%import common.SQL_COMMENT
%import common.INT
%import common.NUMBER
%import common.SIGNED_NUMBER
%import common.INT
%import common.WS

%ignore SQL_MULTILINE_COMMENT
%ignore SQL_COMMENT
%ignore WS